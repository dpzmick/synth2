# try to get rustfmt to do something sane.
# apparently that's hard!

reorder_imports = true
reorder_imported_names = true
reoder_imports_in_group = true # maintain internal/external groupings

# I prefer 80 character lines but that's quite difficult when we indent with
# four spaces
max_width = 100
comment_width = 80 # These can still be reasonable!
wrap_comments = true

single_line_if_else_max_width = 80 # this isn't nearly permissive enough
take_source_hints = true
trailing_comma = "Vertical" # for lists
match_block_trailing_comma = true

###
### Function Definition/Declaration
#
# when functions have many arguments, we want the bracket on the next line, eg
# fn blah(
#    asd,
#    ...,
#    asd)
# {
# ...
#
# without this set to AlwaysNextLine, we will only push the brace to the next
# line when there is a where clause
fn_brace_style = "AlwaysNextLine"

# reduces noise in git blame, even if its not as pretty
fn_args_layout = "Block"

# this setting appears to be useless when fn_args_layout is set to visual
fn_return_indent = "WithWhereClause"

closure_block_indent_threshold = 2

###
### Array Settings
array_width = 60
array_layout = "Block"

###
### Where clauses
### TODO there aren't actually any of these in this codebase yet
where_style = "Rfc"

### Future settings
# what do these things mean
# fn_call_style = "Visual"
# fn_call_width = 80

# I don't really like this, it muddies git blame if the function is renamed
# call_function(x,
#               y,
#               z);
#
# would prefer
# call_function(
#   x, y, z
# );
#
# or something. maybe someday

# other wishes:
# - allow structs to have vertically indented members

# or occasionally!
# x =
#  Some(long thing in here help)
